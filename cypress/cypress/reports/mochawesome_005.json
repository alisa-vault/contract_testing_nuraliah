{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-22T16:05:39.492Z",
    "end": "2025-03-22T16:05:39.882Z",
    "duration": 390,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "19de7e61-71f6-46ac-be8a-56ed4eb047aa",
      "title": "",
      "fullFile": "cypress\\e2e\\inventory.cy.js",
      "file": "cypress\\e2e\\inventory.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3d59fb80-1180-45a8-94f2-314e31324cac",
          "title": "Inventory API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new item",
              "fullTitle": "Inventory API Tests should create a new item",
              "timedOut": null,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', baseUrl, {\n  name: 'Beef Stroganoff',\n  quantity: 25,\n  price: 19.99\n}).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('id');\n  expect(response.body.name).to.eq('Beef Stroganoff');\n});",
              "err": {},
              "uuid": "ba21ba5f-a290-45ed-972e-a35460c29de6",
              "parentUUID": "3d59fb80-1180-45a8-94f2-314e31324cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve all items",
              "fullTitle": "Inventory API Tests should retrieve all items",
              "timedOut": null,
              "duration": 40,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', baseUrl).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "6b8be6b8-4313-406d-9200-7d5b2e9939a1",
              "parentUUID": "3d59fb80-1180-45a8-94f2-314e31324cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a specific item",
              "fullTitle": "Inventory API Tests should retrieve a specific item",
              "timedOut": null,
              "duration": 40,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', baseUrl, {\n  name: 'Chocolate Muffin',\n  quantity: 40,\n  price: 5.99\n}).then(postResponse => {\n  const itemId = postResponse.body.id;\n  cy.request('GET', `${baseUrl}/${itemId}`).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body.name).to.eq('Chocolate Muffin');\n  });\n});",
              "err": {},
              "uuid": "24fbf6c8-1a01-4ede-b631-bbba267cdf6a",
              "parentUUID": "3d59fb80-1180-45a8-94f2-314e31324cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing item",
              "fullTitle": "Inventory API Tests should update an existing item",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', baseUrl, {\n  name: 'Fruit Yoghurt',\n  quantity: 35,\n  price: 7.99\n}).then(postResponse => {\n  const itemId = postResponse.body.id;\n  cy.request('PUT', `${baseUrl}/${itemId}`, {\n    name: 'Updated Fruit Yoghurt',\n    quantity: 40,\n    price: 8.99\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body.name).to.eq('Updated Fruit Yoghurt');\n  });\n});",
              "err": {},
              "uuid": "d612b176-5d4d-4f8e-a348-a5b4b15ec8c8",
              "parentUUID": "3d59fb80-1180-45a8-94f2-314e31324cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an item",
              "fullTitle": "Inventory API Tests should delete an item",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', baseUrl, {\n  name: 'GruyÃ¨re Omelette',\n  quantity: 30,\n  price: 14.99\n}).then(postResponse => {\n  const itemId = postResponse.body.id;\n  cy.request('DELETE', `${baseUrl}/${itemId}`).then(response => {\n    expect(response.status).to.eq(204);\n    cy.request({\n      method: 'GET',\n      url: `${baseUrl}/${itemId}`,\n      failOnStatusCode: false\n    }).then(getResponse => {\n      expect(getResponse.status).to.eq(404);\n    });\n  });\n});",
              "err": {},
              "uuid": "cfa13f8f-7b71-4166-859c-342bebc2394d",
              "parentUUID": "3d59fb80-1180-45a8-94f2-314e31324cac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba21ba5f-a290-45ed-972e-a35460c29de6",
            "6b8be6b8-4313-406d-9200-7d5b2e9939a1",
            "24fbf6c8-1a01-4ede-b631-bbba267cdf6a",
            "d612b176-5d4d-4f8e-a348-a5b4b15ec8c8",
            "cfa13f8f-7b71-4166-859c-342bebc2394d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 264,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}